\begin{verbatim}


/**
 ** toplevel Strip Chart Plotter test program
 **
 ** MDA - 1 June 1990
 **/


#include <stdio.h>
#include <math.h>


#include <X11/StringDefs.h>
#include <X11/Intrinsic.h>
#include <X11/Shell.h>

#include <Xm/Xm.h>
#include <Xm/DrawingA.h>
#include <Xm/Scale.h>
#include <Xm/BulletinB.h>

#ifndef max
#define max(a,b) ((a)>(b)?(a):(b))
#endif

#include "GraphX.h"     /* overall GraphX include file
                           defines data types, plot types,
                           functions and macros            */

#define WIDTH   350
#define HEIGHT  350

#define NCHANNELS 3
#define NPTS 100 

#define SCALE_WIDTH 350
#define SCALE_HEIGHT 100
#define MIN_FREQUENCY 1
#define MAX_FREQUENCY 10

#define BAD_CHANNEL -1

/* function to call to get next value for strip chart */

static double getChannel1ForStripChart();
static double getChannel2ForStripChart();
static double getChannel3ForStripChart();

static double (*getChannelValues[])() = { 
       getChannel1ForStripChart,
       getChannel2ForStripChart,
       getChannel3ForStripChart,
};



/* callbacks */
static void redisplayStrip();
static void resizeStrip();

static void frequencyChanged();


/* translations */
static void quit();
static void printPlot();
static void togglePause();

static char defaultTranslations[] = 
    "<Key>q: quit() \n\
     Ctrl<Key>p: printPlot() \n\
     <Key>p: togglePause()";

static XtActionsRec actionsTable[] = {
     {"quit", (XtActionProc)quit},
     {"printPlot", (XtActionProc)printPlot},
     {"togglePause", (XtActionProc)togglePause},
};



static double updateFrequency = 1.0;
static int globalChannelNumber = BAD_CHANNEL;
static Strip *globalStrip;
static Boolean globalPause = FALSE;


static StripRange stripRange[NCHANNELS];


main(argc,argv)
  int   argc;
  char *argv[];
{
  Widget topLevel, drawingArea, scaleDialog, frequencyScale;
  Arg args[15];
  int n;

  XtTranslations transTable;
  XmString xmStringData;

  int i, j;
  double *data[NCHANNELS];
  unsigned long forePixel, backPixel;
  char *foregroundColor = "white";
  char *backgroundColor= "black";
  char *dataColor = "red";


  char titleString[20];
  char string[20];

  Display *display = NULL;
  int screen;
  Window window1;

/* these are filled in by graphXGetBestFont() calls */
  char *titleFont, *axesFont;
  int   titleFontSize, axesFontSize;

/* 
 * first let's initialize our data buffers (just in case we really care
 *  about looking at the data the strip chart is getting/using...
 *  (probably skip this in most instances)
 */
  for (i = 0; i < NCHANNELS; i++)
     data[i] = (double *) malloc((unsigned) NPTS * sizeof(double));



   XtSetArg(args[0],XtNiconName,"StripChart");
   topLevel = XtInitialize(argv[0], "Strip Plotter", args, 1, &argc, argv);


/*
 * Register new actions and compile translations table
 */
   XtAddActions(actionsTable,XtNumber(actionsTable));
   transTable = XtParseTranslationTable(defaultTranslations);


/*
 * setup a drawingArea widget to draw in
 */
   n = 0;
   XtSetArg(args[n], XmNwidth, WIDTH); n++;
   XtSetArg(args[n], XmNheight, HEIGHT); n++;
   drawingArea = XmCreateDrawingArea(topLevel,"drawingArea",args,n);
   XtManageChild(drawingArea);


/*
 * merge program-defined translations with existing translations
 */
   XtOverrideTranslations(drawingArea,transTable);
   XtOverrideTranslations(topLevel,transTable);

/*
 * add the expose and resize callbacks, passing pointer to strip as the data of 
 *   the callback
 */
   XtAddCallback(drawingArea,XmNexposeCallback,redisplayStrip,&globalStrip);
   XtAddCallback(drawingArea,XmNresizeCallback,resizeStrip,&globalStrip);


/*
 *  need to realize the widgets for windows to be created...
 */

   XtRealizeWidget(topLevel);

   display = XtDisplay(topLevel);
   screen  = DefaultScreen(display);
   XtCreateWindow(drawingArea,InputOutput,CopyFromParent,0L,0);
   window1  = XtWindow(drawingArea);


   n = 0;
   XtSetArg(args[n], XtNwidth, SCALE_WIDTH); n++;
   XtSetArg(args[n], XtNheight, SCALE_HEIGHT); n++;
   xmStringData = XmStringCreateLtoR("frequency", XmSTRING_DEFAULT_CHARSET);
   XtSetArg(args[n], XmNdialogTitle, xmStringData); n++;
   scaleDialog = XmCreateBulletinBoardDialog(topLevel,"scaleDialog",args,n);

   n = 0;
   XtSetArg(args[n], XmNx, 0); n++;
   XtSetArg(args[n], XmNy, 0); n++;
   XtSetArg(args[n], XmNwidth, SCALE_WIDTH); n++;
   XtSetArg(args[n], XmNheight, SCALE_HEIGHT); n++;
   XtSetArg(args[n],XmNmaximum, MAX_FREQUENCY); n++;
   XtSetArg(args[n],XmNminimum, MIN_FREQUENCY); n++;
   XtSetArg(args[n],XmNorientation, XmHORIZONTAL); n++;
   XtSetArg(args[n],XmNprocessingDirection, XmMAX_ON_RIGHT); n++;
   xmStringData = XmStringCreateLtoR("Sampling Frequency (Hz)",
                XmSTRING_DEFAULT_CHARSET);
   XtSetArg(args[n],XmNtitleString,xmStringData); n++;
   XtSetArg(args[n],XmNshowValue, TRUE); n++;
   XtSetArg(args[n],XmNvalue,( (int) updateFrequency) ); n++;
   frequencyScale = XtCreateManagedWidget("frequencyScale",
                xmScaleWidgetClass, scaleDialog, args, n);
   XtAddCallback(frequencyScale,XmNvalueChangedCallback,
                frequencyChanged,&updateFrequency);
   XmStringFree(xmStringData);

   XtManageChild(scaleDialog);



/*
 * now proceed with strip generation
 */

   globalStrip = stripInit(display,screen,window1);

   titleFontSize = GraphX_TitleFontSize(globalStrip);
   titleFont = graphXGetBestFont(display,"times","bold","r", titleFontSize);
   axesFontSize = GraphX_AxesFontSize(globalStrip);
   axesFont = graphXGetBestFont(display,"times","medium","r",axesFontSize);


  /* setup the Strip, use the external-to-stripchart version of variables */

   stripRange[0].minVal = -10.0; stripRange[0].maxVal = 10.0;
   stripRange[1].minVal = -5.0; stripRange[1].maxVal = 5.0;
   stripRange[2].minVal = -8.0; stripRange[2].maxVal = 8.0;

   sprintf(titleString,"Time Axis (%d samples)",NPTS);
   stripSet(globalStrip, NCHANNELS, NPTS, data,
     stripRange, 1.0/updateFrequency, getChannelValues,
     "A StripChart", titleFont,
     titleString, "Value Axis", axesFont,
     foregroundColor, backgroundColor, dataColor, StripExternal);


   /* do the drawing so that expose event can map pixmap onto window */
   stripDraw(globalStrip);


   XtMainLoop();

}




/* 
 * TRANSLATIONS
 */
static void printPlot(w,event,params,num_params)
Widget w;
XEvent *event;
String *params;
int    num_params;
{

  stripPrint(globalStrip);

}



static void quit(w,event,params,num_params)
Widget w;
XEvent *event;
String *params;
int    num_params;
{
/*
 * clean up our space like a good program
 */
  stripTerm(globalStrip);

  exit(0);
}


static void togglePause(w,event,params,num_params)
Widget w;
XEvent *event;
String *params;
int    num_params;
{
  globalPause = ~globalPause;

  if (globalPause)
	stripPause(globalStrip);
   else
	stripResume(globalStrip);
}




/*
 * CALLBACKS 
 */


static void redisplayStrip(w,strip,call_data)
Widget w;
Strip **strip;      /* double indirection since filling in actual */
caddr_t call_data;  /* address of Strip structure later than XtAddCallback */
{

  stripRefresh(*strip);	/* copy pixmap onto window (this is quick) */	

}


static void resizeStrip(w,strip,call_data)
Widget w;
Strip **strip;      /* double indirection since filling in actual */
caddr_t call_data;  /* address of Strip structure later than XtAddCallback */
{

/* 
 * widget/window changed: reset sizes, free & create new pixmap
 * update this new pixmap and map to window
 */
  stripResize(*strip);
  stripDraw(*strip);

}



static void frequencyChanged(w,frequencyPtr,call_data)
Widget w;
double *frequencyPtr;
XmScaleCallbackStruct *call_data;
{

*frequencyPtr = (double) call_data->value;  /* set passed in address */

/* since frequency is inverse of time interval... */
stripSetInterval(globalStrip, 1.0/((double) call_data->value) );

}



/*
 * even though we have registered different callback functions for
 *   each channel in the strip chart, we could use the 
 *   channelNumber and userData arguments for something...
 */

static double getChannel1ForStripChart(channelNumber, userData)
int channelNumber;
caddr_t userData;
{
#define DELTA 0.2
static double staticData = -10.0;
static int direction = 1;

if (staticData >= 10.0) direction = -1;      /* now go downhill */
if (staticData <= -10.0) direction = 1;      /* now go uphill */

if (direction == 1) {
  staticData += DELTA;
} else {
  staticData -= DELTA; }
return (staticData);

}

static double getChannel2ForStripChart(channelNumber, userData)
int channelNumber;
caddr_t userData;
{

return ((double)  3.0*(random()/pow(2.0,31.0)) - 
                      3.0*(random()/pow(2.0,31.0)) );

}


static double getChannel3ForStripChart(channelNumber, userData)
int channelNumber;
caddr_t userData;
{

return ((double) -5.0 - 2.0*(random()/pow(2.0,31.0)) );

}


\end{verbatim}
